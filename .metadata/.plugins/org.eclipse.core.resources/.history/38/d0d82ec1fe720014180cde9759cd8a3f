import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * 
 * @author svalle
 */
public class Scrum implements Gruppo {
	private ArrayList<PuzzleItem> mucchio = new ArrayList<PuzzleItem>();
	
	@Override
	public int conta(Dir side) {
		int x = 0;
		Iterator<PuzzleItem> it = mucchio.iterator();
		while(it.hasNext()){
			PuzzleItem item = it.next();
			if(item.getAdjacent(side).equals("VUOTO")) x++;
		}
		return x;
	}
	
	@Override
	public PuzzleItem getPiece(String id) {
		Iterator<PuzzleItem> it = mucchio.iterator();
		while(it.hasNext()) {
			PuzzleItem item = it.next();
			if(item.equals(id)) {
				it.remove();
				return item;
			}
		}
		return null;
	}
	
	@Override
	public PuzzleItem getPieceByRefs(Dir side, String ref1, String ref2) {
		Dir init = side.init();
		Iterator<PuzzleItem> it = mucchio.iterator();
		while(it.hasNext()){
			PuzzleItem current = it.next();
			String strSide = current.getAdjacent(side);
			String strInit = current.getAdjacent(init);
			if(ref2 == null && ref1 == null 
			  && strInit == null && strSide == null) {
				it.remove();
				return current;
			}
			else
				if(ref1 != null && ref2 != null &&
				 ref1.equals(strSide) && ref2.equals(strInit)) {
					it.remove();
					return current;
				}
		}
		return null;
	}
	
	public PuzzleItem getEdgePiece(Dir edge, Dir side, String ref){
		Iterator<PuzzleItem> it = mucchio.iterator();
		while(it.hasNext()){
			
		}
			return null;
		return null;
	}
	
	@Override
	public void fill(Path path) {
		ArrayList<String> rows = InputOutput.readContent(path);
		Iterator<String> ita = rows.iterator();
		while(ita.hasNext()){
			String line = ita.next();
			String[] piece = line.split("\\t",-1);
			PuzzleItem item = Puzzle.createPiece(piece);
			for(int i=0; i<piece.length; i++)
				System.out.print(piece[i] + " ");
			mucchio.add(item);
			System.out.println();
		}
	}
	
	public boolean isEmpty(){
		return mucchio.isEmpty();
	}
}
